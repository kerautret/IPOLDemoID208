{
    
    "archive": {
        "files": {
            "sourcePoint.png":"input points",
            "resultPointLines.png": "input points and resulting lines",
            "resultLines.png":"resulting lines",
            "resultLines.eps": "resulting lines (eps format) ", 
            "resultPointLines.eps": "resulting lines and points (eps format) ",
            "lines.dat":"results (.dat)",
            "input_0.dat": "input data",
            "mainOutput.txt": "mainOutput.txt",
            "cmd.txt": "command line"
        },
        "params": ["nlines", "dx", "minvotes"]
    },
    
    "build": {
           "build1": {
            "url": "http://ker.iutsd.univ-lorraine.fr/hough3d-src.tgz",
            "construct": "cd hough3d-src; make",
            "move": "hough3d-src/hough3dlines"
             }
    }, 

    
    "general": {
        "demo_title": "Iterative Hough Transform for Line Detection in 3D Point Clouds",
        "xlink_article" : "",
        "input_description": "Input type (.dat) should be in format: X,Y,Z given at each line (each coordinate separated by comma on a single line). <BR> The proposed input comes from: <ul><li><b>attpc data</b>: active target time projection chamber (ATTPC) measurement <br> <font color=\"gray\"> (best parameters: dx=15, minvotes=3 )</font></li><li><b>synthetic data</b>: synthetically generated data <BR> <font color=\"gray\">(best parameters: dx=0.5, minvotes=20)</font></li></ul> ",
        "param_description": "You can set the values of three parameters: <ul> <li> <b>nlines</b>: maximum number of lines considered as output. The lines are selected starting from the maximal voting scores. If it is set to 0 (default) then no filter is applyed and all lines are given as output.  </li> <li><b>minvotes</b>: minimum vote to be detect lines. Increase this value to less sensitive to noise. </li> <li><b>dx</b>: step width defining the step width in x'y'-plane of the parameter space.  when dx=0, it is set to 1/64 of total width of the input point bounding box. </li>  </ul>"
    },
    
     
    
    "inputs": [
        {
      "description": "file containing set of points to be used as dataset (the tags need to be the same)",
      "max_weight": 524288000,
      "ext": ".dat",
      "required": true,
      "type": "data"
    }
    
    ], 
    "results": [
        {
            "contents": {
                "input points": "sourcePoint.png",
                "input points and resulting lines": "resultPointLines.png",
                "resulting lines": "resultLines.png"
            }, 

            "label": "results", 
            "type": "gallery",
            "visible": "info.bad_dx==0 && info.bad_alloc==0"
        },
         {
            "contents": "<h3>Compution Error:</h3><p> <FONT color=\"red\">Value of parameter <b>dx</b> too large.</FONT> <BR> You can set dx to 0 to automatically define this parameter ( i.e it will use dx = (1/64)*(input bounding box size)). ", 
            "type": "html_text",
            "visible": "info.bad_dx==1"
            
        }, 
        {
            "contents": "<h3>Compution Error:</h3><p> <FONT color=\"red\">Value of parameter <b>dx</b> too small (memory allocation not possible on the server). </FONT> <BR> You can set dx to 0 to automatically define this parameter ( i.e it will use dx = (1/64)*(input bounding box size)). </FONT>", 
            "type": "html_text",
            "visible": "info.bad_alloc==1"
            
        }, 
    {
      "contents":"mainOutput.txt",
      "label":"<b>Main algorithm ouput</b><br/>",
      "style":"''",
      "type":"text_file",
       "visible": "info.bad_dx==0"
    },   
 
    {
      "contents":"stderr.txt",
      "label":"<b>std erreor:</b><br/>",
      "style":"''",
      "type":"text_file"
     },
     
    {
      "contents":"cmd.txt",
      "label":"Command line:",
      "style":"''",
      "type":"text_file",
      "visible": "info.bad_dx==0"
    },
     
    {
      "contents":"input_0.dat",
      "name":"toto",
      "label":"Input data ",
      "type":"file_download",
       "visible": "info.bad_dx==0"
    },
    {
      "contents":"plotLineData.plt",
      "label":"gnuplot file ",
      "style":"''",
      "type":"file_download",
       "visible": "info.bad_dx==0"
    }, 
    {
      "contents":"lines.dat",
      "label":"raw results ",
      "style":"''",
      "type":"file_download",
       "visible": "info.bad_dx==0"
    }
    

    ],
    
    
    "params": [
    {
      "label": "maximum number of lines (nlines)",
      "id": "nlines",
      "type": "numeric",
      "values": {
        "default": 0,
        "min": 0,
        "max": 500,
        "step": 1
      }
      },
      {
      "label": "minimum vote count (minvotes)",
      "id": "minvotes",
      "type": "numeric",
      "values": {
        "default": 2,
        "min": 1,
        "max": 500,
        "step": 1
       }
      },
      {
      "label": "xy step width (dx)",
      "id": "dx",
      "type": "numeric",
      "values": {
        "default": 0,
        "min": 1,
        "max": 1000,
        "step": 1
      }
     }
  ],
  
  
    
   "run":"${demoextras}/DemoExtras/run.sh  ${demoextras} input_0.dat plotDataLines.plt resultLines.png ${nlines} ${minvotes} ${dx}"
}